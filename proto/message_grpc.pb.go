// proto/message.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeRegistration_RegisterNode_FullMethodName     = "/raft_pb.NodeRegistration/RegisterNode"
	NodeRegistration_GetNodes_FullMethodName         = "/raft_pb.NodeRegistration/GetNodes"
	NodeRegistration_SendHeartBeat_FullMethodName    = "/raft_pb.NodeRegistration/SendHeartBeat"
	NodeRegistration_RequestVote_FullMethodName      = "/raft_pb.NodeRegistration/RequestVote"
	NodeRegistration_RemoveConnection_FullMethodName = "/raft_pb.NodeRegistration/RemoveConnection"
	NodeRegistration_CheckRPC_FullMethodName         = "/raft_pb.NodeRegistration/checkRPC"
)

// NodeRegistrationClient is the client API for NodeRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition for inter-client communication
type NodeRegistrationClient interface {
	RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeList, error)
	SendHeartBeat(ctx context.Context, in *HearBeatRequest, opts ...grpc.CallOption) (*HearBeatReply, error)
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	RemoveConnection(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	CheckRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type nodeRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeRegistrationClient(cc grpc.ClientConnInterface) NodeRegistrationClient {
	return &nodeRegistrationClient{cc}
}

func (c *nodeRegistrationClient) RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, NodeRegistration_RegisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationClient) GetNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeList)
	err := c.cc.Invoke(ctx, NodeRegistration_GetNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationClient) SendHeartBeat(ctx context.Context, in *HearBeatRequest, opts ...grpc.CallOption) (*HearBeatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HearBeatReply)
	err := c.cc.Invoke(ctx, NodeRegistration_SendHeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, NodeRegistration_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationClient) RemoveConnection(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, NodeRegistration_RemoveConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationClient) CheckRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, NodeRegistration_CheckRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRegistrationServer is the server API for NodeRegistration service.
// All implementations must embed UnimplementedNodeRegistrationServer
// for forward compatibility.
//
// The service definition for inter-client communication
type NodeRegistrationServer interface {
	RegisterNode(context.Context, *NodeInfo) (*RegisterResponse, error)
	GetNodes(context.Context, *Empty) (*NodeList, error)
	SendHeartBeat(context.Context, *HearBeatRequest) (*HearBeatReply, error)
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	RemoveConnection(context.Context, *NodeInfo) (*RegisterResponse, error)
	CheckRPC(context.Context, *Empty) (*RegisterResponse, error)
	mustEmbedUnimplementedNodeRegistrationServer()
}

// UnimplementedNodeRegistrationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeRegistrationServer struct{}

func (UnimplementedNodeRegistrationServer) RegisterNode(context.Context, *NodeInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedNodeRegistrationServer) GetNodes(context.Context, *Empty) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeRegistrationServer) SendHeartBeat(context.Context, *HearBeatRequest) (*HearBeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartBeat not implemented")
}
func (UnimplementedNodeRegistrationServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedNodeRegistrationServer) RemoveConnection(context.Context, *NodeInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConnection not implemented")
}
func (UnimplementedNodeRegistrationServer) CheckRPC(context.Context, *Empty) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRPC not implemented")
}
func (UnimplementedNodeRegistrationServer) mustEmbedUnimplementedNodeRegistrationServer() {}
func (UnimplementedNodeRegistrationServer) testEmbeddedByValue()                          {}

// UnsafeNodeRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeRegistrationServer will
// result in compilation errors.
type UnsafeNodeRegistrationServer interface {
	mustEmbedUnimplementedNodeRegistrationServer()
}

func RegisterNodeRegistrationServer(s grpc.ServiceRegistrar, srv NodeRegistrationServer) {
	// If the following call pancis, it indicates UnimplementedNodeRegistrationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeRegistration_ServiceDesc, srv)
}

func _NodeRegistration_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistration_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServer).RegisterNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistration_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistration_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServer).GetNodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistration_SendHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HearBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServer).SendHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistration_SendHeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServer).SendHeartBeat(ctx, req.(*HearBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistration_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistration_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistration_RemoveConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServer).RemoveConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistration_RemoveConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServer).RemoveConnection(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistration_CheckRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServer).CheckRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistration_CheckRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServer).CheckRPC(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeRegistration_ServiceDesc is the grpc.ServiceDesc for NodeRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft_pb.NodeRegistration",
	HandlerType: (*NodeRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _NodeRegistration_RegisterNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeRegistration_GetNodes_Handler,
		},
		{
			MethodName: "SendHeartBeat",
			Handler:    _NodeRegistration_SendHeartBeat_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _NodeRegistration_RequestVote_Handler,
		},
		{
			MethodName: "RemoveConnection",
			Handler:    _NodeRegistration_RemoveConnection_Handler,
		},
		{
			MethodName: "checkRPC",
			Handler:    _NodeRegistration_CheckRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
