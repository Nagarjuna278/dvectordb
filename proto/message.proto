// proto/message.proto
syntax = "proto3";

option go_package = "./proto"; // This tells protoc where to put generated Go files

package raft_pb; // A package name for your protobuf definitions

// The service definition for inter-client communication
service NodeRegistration {
  rpc RegisterNode (NodeInfo) returns (RegisterResponse);
  rpc GetNodes(Empty) returns (NodeList);
  rpc SendHeartBeat(HearBeatRequest) returns (HearBeatReply);
  rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply);
  rpc RemoveConnection(NodeInfo) returns (RegisterResponse);
  rpc checkRPC(Empty) returns (RegisterResponse);
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply);
}

message NodeInfo {
  int32 id = 1;
  string addr = 2;
}

message RegisterResponse {
  string message = 1;
}

message NodeList {
  repeated NodeInfo nodes = 1;
}

message Empty{}

message Signal {
  int32 Term = 1;
  bool flag = 2;
  int32 ind = 3;
}


// Arguments:
// term candidate’s term
// candidateId candidate requesting vote
// lastLogIndex index of candidate’s last log entry (§5.4)
// lastLogTerm term of candidate’s last log entry (§5.4)

// Results:
// term currentTerm, for candidate to update itself
// voteGranted true means candidate received vote
// Receiver implementation:
// 1. Reply false if term < currentTerm (§5.1)
// 2. If votedFor is null or candidateId, and candidate’s log is at
// least as up-to-date as receiver’s log, grant vote (§5.2, §5.4)

message Log {
  int32 Term=1;
  int32 Ind=2;
  string command=3;
  string key=4;
  string value=5;
}

message RequestVoteArgs {
  int32 Id = 1;
  int32 Term = 2;
  int32 LastLogInd =3;
  int32 LastLogTerm = 4;
  string Addr = 5;
}

message RequestVoteReply {
  bool vote_granted = 1;
  int32 term=2;
  string votedFor=3;
}


message HearBeatRequest {
  int32 Id=1;
  int32 Term=2;
  int32 LogInd=3;
  string Add=4;
}


message HearBeatReply {
  bool Flag = 1;
  bool NewLeader = 2;
  int32 Term = 3;
}

// Arguments:
// term leader’s term
// leaderId so follower can redirect clients
// prevLogIndex index of log entry immediately preceding
// new ones
// prevLogTerm term of prevLogIndex entry
// entries[] log entries to store (empty for heartbeat;
// may send more than one for efficiency)
// leaderCommit leader’s commitIndex

// Results:
// term currentTerm, for leader to update itself
// success true if follower contained entry matching
// prevLogIndex and prevLogTerm

message AppendEntriesArgs{
  int32 Term = 1;
  int32 Id = 2;
  int32 prevLogIndex =3;
  int32 prevLogTerm = 4;
  repeated Log log =5;
  int32 CommitInd =6;
}

message AppendEntriesReply {
  int32 Term = 1;
  bool success = 2;
  int32 prevLogInd = 3;
  int32 prevLogTerm = 4;
}

message LogList {
  repeated Log log=1;
}